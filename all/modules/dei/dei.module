<?php

//----------------------------------------------------------------------------
// Drupal core hooks.

/**
* Implementation of hook_menu().
*/
function dei_menu() {
	$items['allocator/%/order'] = array(
		'title' => 'Order allocator' ,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dei_overview_form'),
		'access callback' => 'user_access',
		'access arguments' => array('create budget_category content'),
		'menu_name' => 'DEI',
	);
	$items['rozpocet/%'] = array(
		//'title callback' => 'dei_allocator_title' ,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dei_allocator_form'),
		'access callback' => 'user_access',
		'access arguments' => array('create user_allocator content'),
		'menu_name' => 'DEI',
		'file' => 'user_allocator.inc',
	);
	$items['rozpocet/%/submit'] = array(
		//'title callback' => 'dei_allocator_title' ,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dei_allocator_sub_form'),
		'access callback' => 'user_access',
		'access arguments' => array('create user_allocator content'),
		'menu_name' => 'DEI',
		'file' => 'user_allocator_submit.inc',
	);
	$items['rozpocet/%/result'] = array(
		//'title callback' => 'dei_allocator_title' ,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dei_show_result_form'),
		'access callback' => 'user_access',
		'access arguments' => array('access content'),
		'menu_name' => 'DEI',
		'file' => 'show_result.inc',
	);
	$items['rozpocet/%/generate'] = array(
		//'title callback' => 'dei_allocator_title' ,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dei_generate_code_form'),
		'access callback' => 'user_access',
		'access arguments' => array('create budget_category content'),
		'menu_name' => 'DEI',
		'file' => 'generate_code.inc',
	);
	$items['rozpocet/%/codes'] = array(
		//'title callback' => 'dei_allocator_title' ,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dei_generate_code_form'),
		'access callback' => 'user_access',
		'access arguments' => array('create budget_category content'),
		'menu_name' => 'DEI',
		'file' => 'generate_code.inc',
	);
return $items;
}



/**
* Implementation of hook_perm
*/
/*function form_test_perm () {
   return array(
    'add allocator'
  );
} */

/**
* Implementation of hook_form_FORM_ID_form_alter
* Adds help line for title of Allocator
*/
function dei_form_allocator_node_form_alter(&$form, &$form_state) {

$form['title']['#suffix'] = t('Name of the allocator, e.g., Rozpočet Plasy 2010.');

}
/**
* Implementation of hook_form_FORM_ID_form_alter
* Adds help line for title of Budget category
*/
function dei_form_budget_category_node_form_alter(&$form, &$form_state) {

$form['title']['#suffix'] = t('Name of the budget category, e.g., Sport, Fotbalový klub.');

}

// VIEW API

/**
 * Implementation of hook_views_api().
 */
function dei_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'dei'),
    //'path' => drupal_get_path('module', 'dei') . '/includes',
  );
}

//***********
function dei_overview_form(&$form_state) {
	$view_name = 'reusable_category_list';
	$display_id = 'defaults';
	// we assume that the view specified by $view_name has $display_id as its display.

	//To get the view specified by $view_name
	$view = views_get_view($view_name);
	$view->set_display($display_id);

	//Optional: to set the arguments
	$view->set_arguments(array(arg(1)));

	$view->execute();
//oprava narychlo - $view->execute(); vrati  max. 10 prvnich, je to dle vseho nejaky bug cck+views, ktery by mel v novejsich verzich byt jiz opraven

$query = "
SELECT node.nid AS nid,
   node.title AS node_title,
   node.language AS node_language,
   node_data_field_dei_allocator.field_category_parent_nid AS node_data_field_dei_allocator_field_category_parent_nid,
   node.type AS node_type,
   node.vid AS node_vid,
   node_data_field_dei_allocator.field_dei_category_weight_value AS node_data_field_dei_allocator_field_dei_category_weight_value,
   node_data_field_dei_allocator.field_dei_previous_value_value AS node_data_field_dei_allocator_field_dei_previous_value_value,
   node_data_field_dei_category_weight.field_dei_category_weight_value AS node_data_field_dei_category_weight_field_dei_category_weight_value,
   node_revisions.title AS node_revisions_title
 FROM node node 
 LEFT JOIN content_type_budget_category node_data_field_dei_allocator ON node.vid = node_data_field_dei_allocator.vid
 LEFT JOIN content_type_budget_category node_data_field_dei_category_weight ON node.vid = node_data_field_dei_category_weight.vid
 LEFT JOIN node_revisions node_revisions ON node.vid = node_revisions.vid
 WHERE (node.type in ('budget_category')) AND (node_data_field_dei_allocator.field_dei_allocator_nid = %d)
   ORDER BY node_data_field_dei_category_weight_field_dei_category_weight_value ASC, node_revisions_title ASC
";
$results = db_query($query,array(arg(1)));
while ( $result = db_fetch_object ($results) ) {
  //print_r( $obj);
//}
	//foreach ($view->result as $key => $result) {
	  $nid = $result->nid;
	  foreach ($result as $id => $field) {
		  $php_array[$nid][$id]= $field;
	  }
	  $php_array[$nid]['mlid'] = $php_array[$nid]['nid'];
	  $php_array[$nid]['weight'] = $result->node_data_field_dei_allocator_field_dei_category_weight_value;
	  $php_array[$nid]['plid'] = $result->node_data_field_dei_allocator_field_category_parent_nid;
	  $php_array[$nid]['title'] = $php_array[$nid]['node_title'];
	  $php_array[$nid]['depth'] = 1;
	  $php_array[$nid]['has_children'] = 0;
	  $php_array[$nid]['title_callback'] = t;
	  $php_array[$nid]['old_value'] = $result->node_data_field_dei_allocator_field_dei_previous_value_value + 0;
	  //drupal_set_message(print_r($result->node_data_field_category_parent_field_dei_previous_value_value,1). print_r($php_array[$nid]['old_value'],1));
	  if (!($result->node_data_field_dei_allocator_field_category_parent_nid > 0)) {
		$root_array[] =& $php_array[$nid];
		$php_array[$nid]['node_data_field_dei_allocator_field_category_parent_nid'] = 0;
	  } else {
		$php_array[$result->node_data_field_dei_allocator_field_category_parent_nid]['children'][$nid] = $nid;
	  }
	}
	if (isset($root_array)) {
		foreach ($root_array as $ra) {
		  $final_array[] = recursor($php_array, $ra);
		}
	} else {
		drupal_set_message(t('No root budget category. Choose/add at least one. Or you do not have rights to access them.'));
}


 //drupal_set_message('<pre>' .  print_r($final_array,1). '</pre>');
   if (isset($final_array)) {
	$form = _dei_overview_tree_form($final_array);
  }
  //drupal_set_message('<pre>' . print_r($form,1). '</pre>');
  //include custom js
    _include_js_check();
  
 return $form;

}

function recursor( $array, $item, $depth = 1 ) {

		if ( isset($item['children']) ) {
		  $item['has_children'] = 1;
		  $item['depth'] = $depth;
		  $out['link'] = $item;
			foreach ($item['children'] as $c) {
				$out['below'][$c] = recursor( $array, $array[$c], $depth + 1 );
			}
		}
		else {
		  $item['depth'] = $depth;
			$out['link'] = $item;
			$out['below'] = array();
			
		 }
	return $out;
}
 

function _dei_overview_tree_form($tree) {

  static $form = array('#tree' => TRUE);
  foreach ($tree as $data) {
    $title = '';
    $item = $data['link'];
    // Don't show callbacks; these have $item['hidden'] < 0.
    if ($item && $item['hidden'] >= 0) {
      $mlid = 'mlid:'. $item['mlid'];
      $form[$mlid]['#item'] = $item;
      $form[$mlid]['#attributes'] = $item['hidden'] ? array('class' => 'menu-disabled') : array('class' => 'menu-enabled');
      $form[$mlid]['title']['#value'] = $item['title'] . ($item['hidden'] ? ' ('. t('disabled') .')' : '');
      $form[$mlid]['hidden'] = array(
        '#type' => 'textfield',
        '#default_value' => '1',
		'#size' => 1,
		//'#disabled' => 'true',
      );
      $form[$mlid]['expanded'] = array(
        '#type' => 'textfield',
        '#default_value' => $item['old_value'],
      );
	  $form[$mlid]['mlid'] = array(
        '#type' => 'textfield',
        '#default_value' => $item['mlid'],
      );
      $form[$mlid]['weight'] = array(
        '#type' => 'weight',
        '#delta' => 50,
        '#default_value' => isset($form_state[$mlid]['weight']) ? $form_state[$mlid]['weight'] : $item['weight'],
      );
      $form[$mlid]['mlid'] = array(
        '#type' => 'hidden',
        '#value' => $item['mlid'],
      );
      $form[$mlid]['plid'] = array(
        '#type' => 'textfield',
        '#default_value' => isset($form_state[$mlid]['plid']) ? $form_state[$mlid]['plid'] : $item['plid'],
        '#size' => 6,
      );
	  $form[$mlid]['check'] = array(
		'#type'=>'radio',
		//'#disabled' => 'true',
	  );
      // Build a list of operations.
      $operations = array();
      $operations['edit'] = l(t('edit'), 'node/'. $item['mlid'] .'/edit');
	  $operations['delete'] = l(t('delete'), 'node/'. $item['mlid'] .'/delete');
      // Only items created by the menu module can be deleted.
      /*if ($item['module'] == 'menu' || $item['updated'] == 1) {
        $operations['delete'] = l(t('delete'), 'admin/build/menu/item/'. $item['mlid'] .'/delete');
      }*/
      // Set the reset column.
     /*elseif ($item['module'] == 'system' && $item['customized']) {
        $operations['reset'] = l(t('reset'), 'admin/build/menu/item/'. $item['mlid'] .'/reset');
      }*/

      $form[$mlid]['operations'] = array();
      foreach ($operations as $op => $value) {
        $form[$mlid]['operations'][$op] = array('#value' => $value);
      }
    }

    if ($data['below']) {
      _dei_overview_tree_form($data['below']);
    }
  }

  $form['infotext'] = array(
	'#type' => 'fieldset',
	'#prefix' => '<div id="infotext-wrapper">', // This is our wrapper div.
	'#suffix' => '</div>',
);

  
  $form['save'] = array(
	'#type' => 'submit',
	'#value' => t('Save'),
);


  return $form;
}
/**
*
* hardcoded to 1st position and 5th position !!!
*/
function _include_js_check ($ok_message = 'Sums are ok',$wrong_message = "WRONG SUMS: the line <span id='dei_msg_1'></span> has value <span id='dei_msg_2'></span>, but the sum of its children is <span id='dei_msg_3'></span>. (The last error shown only.)") {
  $js = '
  /*run at the rendering*/
  $(document).ready(function() {
	order_check_sum();
});
  /*when reordering*/
  $(document).ready(function() {
    $(".tabledrag-handle").mouseout(function() {
			order_check_sum();
		}
	  );
	});
	/*before submitting*/
	$(document).ready(function() {
    $("#edit-save").click(function() {
			order_check_sum();
			show_all_td();
		}
	  );
	});
	/*after changing text*/
	$(document).ready(function() {
    $(".form-text").change(function() {
			order_check_sum();
		}
	  );
	});
	
function order_check_sum() { 
	/*recalculate depth*/
	$("#menu-overview > tbody > tr").each(function() {
	   var n = 5;
	   $(this).find("td").eq(n).find("div > input").val($(this).find("td:first > div").size()+1);
	});
	/*check sum*/
	var m = $("#menu-overview > tbody > tr").size() - 1;
	var ok = true;
	
	for (i=0;i<=m;i++) {
	  var s1 = parseFloat($("#menu-overview > tbody > tr").eq(i).find("td:eq(1) > div > input").val());
	  var s2 = 0;
	  var last = true;
	  {
		  for (j=(i+1);j<=m;j++) {
			  if (($("#menu-overview > tbody > tr").eq(j).find("td:eq(5) > div > input").val() - 0) ==
				  ($("#menu-overview > tbody > tr").eq(i).find("td:eq(5) > div > input").val()) - 0) {
					j = m;
				} else {
				  if (($("#menu-overview > tbody > tr").eq(j).find("td:eq(5) > div > input").val() - 0) ==
				  (($("#menu-overview > tbody > tr").eq(i).find("td:eq(5) > div > input").val()) - 0) + 1) {
					  s2 += ($("#menu-overview > tbody > tr").eq(j).find("td:eq(1) > div > input").val() - 0);
					last = false;
				  }
				}
			}
			if ((s1 != s2) && !(last)) {
			  $("#infotext-wrapper").html("'.$wrong_message.'");
			  $("#dei_msg_1").html(i+1);
			  $("#dei_msg_2").html(s1-0);
			  $("#dei_msg_3").html(s2-0);
			  $("#infotext-wrapper").addClass("messages error");
			  $("#infotext-wrapper").removeClass("status");
			  $("#menu-overview > tbody > tr:first > td:last > div > input").attr("checked", false);
			  $("#menu-overview > tbody > tr:first > td:last > div > input").val(0);

			  
			  ok = false;
			}
		}
	  }
	  /*if ok, change message*/
	  if (ok) {
		$("#infotext-wrapper").html("'.$ok_message.'" );
		$("#infotext-wrapper").addClass("messages status");
		$("#infotext-wrapper").removeClass("error");
		$("#menu-overview > tbody > tr:first > td:last > div > input").attr("checked", true);
		$("#menu-overview > tbody > tr:first > td:last > div > input").val(1);
	  }
}

function show_all_td() {
  $("td").removeAttr("style");
}
  
  
  
  ';
  drupal_add_js ($js, 'inline');
}

/**
 * Implemenation of hook_theme().
 */
function dei_theme() {
  return array(
    'dei_overview_form' => array(
		  //'file' => 'menu.admin.inc',
		  'arguments' => array('form' => NULL),
    ),
  );
}

function theme_dei_overview_form($form) {
  drupal_add_tabledrag('menu-overview', 'match', 'parent', 'menu-plid', 'menu-plid', 'menu-mlid', TRUE);
  drupal_add_tabledrag('menu-overview', 'order', 'sibling', 'menu-weight');

  $header = array(
    t('Menu item'),   
    array('data' => t('Old value'), 'class' => 'checkbox'),
    t('Weight'),
    array('data' => t('Operations'), 'colspan' => '2'),
	array( 'class' => 'hidden'),
	array( 'class' => 'hidden'),
	array( 'class' => 'hidden'),
  );

  $rows = array();
  foreach (element_children($form) as $mlid) {
    if (isset($form[$mlid]['hidden'])) {
      $element = &$form[$mlid];
      // Build a list of operations.
      $operations = array();
      foreach (element_children($element['operations']) as $op) {
        $operations[] = drupal_render($element['operations'][$op]);
      }
      while (count($operations) < 2) {
        $operations[] = '';
      }

      // Add special classes to be used for tabledrag.js.
      $element['plid']['#attributes']['class'] = 'menu-plid';
      $element['mlid']['#attributes']['class'] = 'menu-mlid';
      $element['weight']['#attributes']['class'] = 'menu-weight';

      // Change the parent field to a hidden. This allows any value but hides the field.
      $element['plid']['#type'] = 'hidden';

      $row = array();
      $row[] = theme('indentation', $element['#item']['depth'] - 1) . drupal_render($element['title']);
      
      $row[] = array('data' => drupal_render($element['expanded']), 'class' => 'checkbox');
      $row[] = drupal_render($element['weight']) . drupal_render($element['plid']) . drupal_render($element['mlid']);
      $row = array_merge($row, $operations);
	  $row[] = array('data' => drupal_render($element['hidden']), 'class' => 'hidden');
	  $row[] = array('data' => drupal_render($element['mlid']), 'class' => 'hidden');
	  $row[] = array('data' => drupal_render($element['check']));

      $row = array_merge(array('data' => $row), $element['#attributes']);
      $row['class'] = !empty($row['class']) ? $row['class'] .' draggable' : 'draggable';
      $rows[] = $row;
    }
  }
  $output = '';
  if ($rows) {
    $output .= theme('table', $header, $rows, array('id' => 'menu-overview'));
  }
  $output .= drupal_render($form);
  return $output;
}

/**
* Validate callback for the  form.
*/
function dei_overview_form_validate($form, &$form_state) {
  //if ($form['dei_check']
  $ak = array_keys($form['#post']);
  //drupal_set_message('<pre>'.$ak[0].print_r($form_state,1).'</pre>');
  if (!$form_state['values'][$ak[0]]['check']) {
    form_error($form['infotext'],t('Sums are wrong'));
  }
}

/**
* Submit callback 
*/
function dei_overview_form_submit($form, &$form_state) {
	module_load_include('inc', 'node', 'node.pages');
	foreach ($form_state['values'] as $v) {
	  if (($v['mlid'] > 0)) {
	      $node = node_load($v['mlid'], NULL, TRUE);
		  $query = "
			UPDATE content_type_budget_category SET 
			field_category_parent_nid = '%d',
			field_dei_category_weight_value = '%d',
			field_dei_previous_value_value = %b
			WHERE nid = '%d'
		  ";
		  db_query($query,array($v['plid'],$v['weight'],$v['expanded'],$v['mlid']));
		 /* $values = array();
		  $new_form_state = array();
		  $values['field_dei_previous_value'][0]['value'] = $v['expanded'];
		  $values['field_dei_category_weight'][0]['value'] = $v['weight'];
		  //$values['field_category_parent'][0]['value'] = $v['plid'];
		  $values['op'] = t('Save');
		  //drupal_set_message('<pre>'.print_r($v,1).'</pre>');
		  $new_form_state['values'] = $values;
		  $new_form_state['node'] = array($node);
		  drupal_execute('budget_category_node_form', $new_form_state, $node);*/
	  }
	}
	drupal_flush_all_caches();

}
?>
